@model Models.AttachmentsModel
@using System.Text.RegularExpressions;

<div id="attachmentsDiv" class="form-horizontal">

	<table id="tblAttachment" class="table table-striped table-condensed">
		<thead>
			<tr>
				@*
				<th>Id</th>*@
				<th>Attachment Type</th>
				<th>Attachment Type</th>
				<th>File</th>
				<th>Download</th>
				<th>Upload</th>
                <th>Delete</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.AttachmentsRecords)
			{
				<tr data-id="@item.Id" data-attachmentTypeId="@item.AttachmentTypeId"   data-transactionid="@Model.TransactionId" data-applicationtypeid="@item.ApplicationTypeId">

					<td>@GetFileNameFromPath(item.FileName)</td>
					<td>
						@item.AttachmentName
						&nbsp;
						@if (item.IsRequired)
						{
							<span style="color:red">*</span>
						}
					</td>
					<td>

						@if (item.FileType.ToString() == Models.FileType.Image.ToString())
						{
							if (!string.IsNullOrEmpty(@item.Path))
							{
								<a class="my_images" href="~/Images/General/@item.Path">
									<img src="~/Images/General/@item.Path" alt="" width="150" height="100" />
								</a>
							}
							else
							{
								<a class="my_images" href="~/Images/NoPreview.png">
									<img src="~/Images/NoPreview.png" alt="" width="150" height="100" />
								</a>
							}
						}
						@if (item.FileType.ToString() == Models.FileType.NoPreview.ToString())
						{
							<a class="my_images" href="~/Images/NoPreview.png">
								<img src="~/Images/NoPreview.png" alt="" width="150" height="100" />
							</a>
						}
						@if (item.FileType.ToString() == Models.FileType.DOC.ToString())
						{
							<a class="my_images" href="~/Images/word.jpg">
								<img src="~/Images/word.jpg" alt="" width="150" height="100" />
							</a>
						}
						@if (item.FileType.ToString() == Models.FileType.TXT.ToString())
						{
							<a class="my_images" href="~/Images/txt.png">
								<img src="~/Images/txt.png" alt="" width="150" height="100" />
							</a>
						}
						@if (item.FileType.ToString() == Models.FileType.PDF.ToString())
						{
							<a class="my_images" href="~/Images/pdf.png">
								<img src="~/Images/pdf.png" alt="" width="150" height="100" />
							</a>
						}
						@if (item.FileType.ToString() == Models.FileType.Excel.ToString())
						{
							<a class="my_images" href="~/Images/excel.png">
								<img src="~/Images/excel.png" alt="" width="150" height="100" />
							</a>
						}

					</td>
					<td>
						@if (Model.CanDownload)
                        {
                            if (!string.IsNullOrEmpty(item.Path))
                            {
                                <a class="Download btn btn-sm btn-info" href="~/Images/General/@item.Path" download="@item.FileName">
                                    <i class="glyphicon glyphicon-download"></i> &nbsp;
                                    Download
                                </a>
                            }
                        }

					</td>
					<td>
						@if (Model.CanUpload)
						{
							if (item.IsRequired)
							{
								<input id="TransactionsAttachment.File-upload-@item.Id" type="file" data-val-required="true" class="hide file-upload" accept=".tiff,.jpg,.jpeg,.png,bmp,.pdf,.doc,.docx,.xls,.xlsx">
							}
							else
							{
								<input type="file" class="hide file-upload" accept=".tiff,.jpg,.jpeg,.png,bmp,.pdf,.doc,.docx,.xls,.xlsx">
							}

							<button type="button" id="btnUpload" class="btn btn-sm btn-info" onclick="$(this).siblings('.file-upload').trigger('click');">
								<i class="glyphicon glyphicon-upload"></i>
								&nbsp;
								Upload File
							</button>
							if (Model.CanUpload)
							{
								<label class="attachment-required hide text-danger"> This File Is Required </label>
							}
						}
					</td>
					<td>
						@if (Model.CanDelete)
						{
							if (!string.IsNullOrEmpty(item.Path))
							{
								<button type="button" id="btnAttachmentDelete" class="btn btn-sm btn-info">
									Delete
								</button>
							}
						}

					</td>
				</tr>

			}
		</tbody>
		<tfoot>
			<tr>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>

			</tr>
		</tfoot>
	</table>


</div>
@functions {

	string GetFileNameFromPath(string path)
	{

		MatchCollection guids = Regex.Matches(path, @"(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}"); //Match all substrings in findGuid
		for (int i = 0; i < guids.Count; i++)
		{
			string match = guids[i].Value; //Set Match to the value from the match
			if (!string.IsNullOrEmpty(match))
			{
				path = path.Replace(match + "_", "");
			}

		}
		return path;
	}

	string encode(String input)
	{
		string resultStr = "";

		foreach (var ch in input.ToCharArray())
		{
			if (isUnsafe(ch))
			{
				resultStr += ('%');
				resultStr += (toHex(ch / 16));
				resultStr += (toHex(ch % 16));
			}
			else
			{
				resultStr += (ch);
			}
		}
		return resultStr;
	}

	private static char toHex(int ch)
	{
		return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
	}

	private static bool isUnsafe(char ch)
	{
		if (ch > 128 || ch < 0)
			return true;
		return " %$&+,/:;=?@<>#%".IndexOf(ch) >= 0;
	}
}
