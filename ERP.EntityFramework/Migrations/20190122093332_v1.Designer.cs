// <auto-generated />
using System;
using ERP.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190122093332_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.ATTACHMENT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATT_ATTACHMENT_NAME_AR")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ATT_ATTACHMENT_NAME_EN")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("ATT_ATTAHCMENT_MANDATORY");

                    b.Property<bool?>("ATT_IS_DISABLED");

                    b.Property<int?>("ATT_TYPE");

                    b.Property<int>("TRANSACTION_ATTACHMENT_ID");

                    b.Property<int>("TRANSACTION_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("TRANSACTION_ATTACHMENT_ID");

                    b.HasIndex("TRANSACTION_TYPE_ID");

                    b.ToTable("ATTACHMENT");
                });

            modelBuilder.Entity("Models.ActionButtons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ButtonText");

                    b.Property<Guid?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ActionButtons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af3c18df-1280-4234-8dc5-6ab0ff76048d"),
                            ButtonText = "Create",
                            StatusId = new Guid("58e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("06d9ee9f-3b2c-45e5-bf5e-2a3a5df4df79"),
                            ButtonText = "Save As Draft",
                            StatusId = new Guid("58e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("bd581f44-e950-481a-af53-7880f60cafae"),
                            ButtonText = "Cancel",
                            StatusId = new Guid("58e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("fe3717d5-6f91-4518-869f-c8e84d324ffa"),
                            ButtonText = "Approve",
                            StatusId = new Guid("59e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("4e6032cb-a8a1-48a4-9a14-70d6c4a6ac9c"),
                            ButtonText = "Reject",
                            StatusId = new Guid("59e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("8a897f19-2605-4726-98a7-ab35ef1eb392"),
                            ButtonText = "On-Hold",
                            StatusId = new Guid("59e07c1d-f068-4a34-2b80-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("fa459818-d04e-4fbb-a83c-b56ad66215d0"),
                            ButtonText = "Ship",
                            StatusId = new Guid("5a585ca4-941f-4892-2b81-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("138a4260-c9c5-4612-9eec-90f9e694ad53"),
                            ButtonText = "Update",
                            StatusId = new Guid("5a585ca4-941f-4892-2b81-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("e2e221a4-a449-4a8a-9fde-0987c62f889a"),
                            ButtonText = "Meeting",
                            StatusId = new Guid("5a585ca4-941f-4892-2b81-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("d9ce84ca-b4be-474d-99ac-97e95dedad7f"),
                            ButtonText = "Update",
                            StatusId = new Guid("b770f3f8-7b25-478e-2b82-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("61c697fe-0e10-4e9e-9250-fbda8ce5d2ec"),
                            ButtonText = "Close",
                            StatusId = new Guid("b770f3f8-7b25-478e-2b82-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("26490b4d-1b1a-470c-8f75-778886f773c0"),
                            ButtonText = "Cancel",
                            StatusId = new Guid("b770f3f8-7b25-478e-2b82-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("fa05023a-1255-4734-8330-1290e45001ee"),
                            ButtonText = "Close",
                            StatusId = new Guid("12a02a4a-d055-4812-2b83-08d64cccfc63")
                        },
                        new
                        {
                            Id = new Guid("fab89b94-77e3-48ba-b2b8-d63a9adb4302"),
                            ButtonText = "Back",
                            StatusId = new Guid("12a02a4a-d055-4812-2b83-08d64cccfc63")
                        });
                });

            modelBuilder.Entity("Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "cc68047f-ebc3-499c-a906-25ade4d35a72",
                            CreatedDate = new DateTime(2019, 1, 22, 13, 33, 31, 353, DateTimeKind.Local).AddTicks(6431),
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "249c2c82-bd91-480b-b460-9b49cee9c2e7",
                            CreatedDate = new DateTime(2019, 1, 22, 13, 33, 31, 353, DateTimeKind.Local).AddTicks(7138),
                            Description = "Editor",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "41ae10ce-8e83-49ab-8283-cbf0080be4c0",
                            CreatedDate = new DateTime(2019, 1, 22, 13, 33, 31, 353, DateTimeKind.Local).AddTicks(7161),
                            Description = "Viewer",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1eeea024-d7f2-4c83-b5cd-0039def1f538"),
                            Code = "KRI",
                            Description = "Karachi",
                            IsActive = true,
                            Name = "Karachi",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        },
                        new
                        {
                            Id = new Guid("93f89299-cfc9-4998-9ddd-09c5583dc8c2"),
                            Code = "LHR",
                            Description = "Lahore",
                            IsActive = true,
                            Name = "Lahore",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        },
                        new
                        {
                            Id = new Guid("70f09e81-8e22-4fb5-a3fb-2c07b23390a1"),
                            Code = "GRW",
                            Description = "Gujranwala",
                            IsActive = true,
                            Name = "Gujranwala",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        },
                        new
                        {
                            Id = new Guid("c63a6ad5-e617-4c77-a160-46fa10b1a47b"),
                            Code = "SKT",
                            Description = "Sialkot",
                            IsActive = true,
                            Name = "Sialkot",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        },
                        new
                        {
                            Id = new Guid("af8db26b-bffa-452f-9d7e-a5dc67fa1a2b"),
                            Code = "PSR",
                            Description = "Pasrur",
                            IsActive = true,
                            Name = "Pasrur",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        },
                        new
                        {
                            Id = new Guid("a8b23433-0b69-42fe-a6e7-b93c21a622c6"),
                            Code = "GAW",
                            Description = "Gawadar",
                            IsActive = true,
                            Name = "Gawadar",
                            RegionId = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0")
                        });
                });

            modelBuilder.Entity("Models.ConsignmentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("MillId");

                    b.Property<string>("OrderComments");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<Guid?>("RegionId");

                    b.Property<Guid?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("MillId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StatusId");

                    b.ToTable("ConsignmentOrders");
                });

            modelBuilder.Entity("Models.ConsignmentOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<Guid?>("ConsignmentOrderId");

                    b.Property<Guid?>("FabricId");

                    b.Property<string>("FabricTitle");

                    b.Property<string>("FabricType");

                    b.Property<string>("FormatReference");

                    b.Property<string>("GSM");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LayerType");

                    b.Property<decimal>("Length");

                    b.Property<string>("PaperType");

                    b.Property<int>("QtyIJ");

                    b.Property<int>("QtyJ");

                    b.Property<int>("QtyWMA");

                    b.Property<string>("Remarks");

                    b.Property<string>("Size");

                    b.Property<int>("WT");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentOrderId");

                    b.HasIndex("FabricId");

                    b.ToTable("ConsignmentOrderItem");
                });

            modelBuilder.Entity("Models.DailyStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("AskingRate");

                    b.Property<double>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("DateReceived");

                    b.Property<Guid?>("FabricId")
                        .IsRequired();

                    b.Property<string>("GSM");

                    b.Property<decimal>("Length");

                    b.Property<Guid?>("MillId")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("TTLWT");

                    b.Property<string>("VarianceInGSM")
                        .IsRequired();

                    b.Property<string>("VarianceInLength")
                        .IsRequired();

                    b.Property<string>("VarianceInWidth")
                        .IsRequired();

                    b.Property<double>("WTOnePiece");

                    b.Property<decimal>("Width");

                    b.Property<decimal>("WidthInches");

                    b.HasKey("Id");

                    b.HasIndex("FabricId");

                    b.HasIndex("MillId");

                    b.ToTable("DailyStocks");
                });

            modelBuilder.Entity("Models.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Designation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eee1a096-83ea-4d3f-88ee-1da7f6615b77"),
                            Description = "Managing Director",
                            IsActive = true,
                            Name = "MD"
                        },
                        new
                        {
                            Id = new Guid("f03ecb13-3f1a-4fbb-b197-591b81cfd6a1"),
                            Description = "CPM",
                            IsActive = true,
                            Name = "CPM"
                        },
                        new
                        {
                            Id = new Guid("53cf0015-26d2-45d0-a2f0-b92087aaa1cd"),
                            Description = "Manager",
                            IsActive = true,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("d4dd6404-7c8f-4073-b97c-cca7959521e8"),
                            Description = "Mechanical",
                            IsActive = true,
                            Name = "Mechanical"
                        });
                });

            modelBuilder.Entity("Models.ERPUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a286748-d827-4f74-b958-1e98527fdf46",
                            DOB = new DateTime(1982, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mirza.sohail@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Sohail",
                            NormalizedEmail = "mirza.sohail@hotmail.com",
                            NormalizedUserName = "SOHAIL",
                            PasswordHash = "AQAAAAEAACcQAAAAEP/Olrz9vT/WdxIzvZ6b0Tbp/K3vgM4xyP8bxSV8vZO5LK16E5O4JTqTQVDuYRAX5A==",
                            PhoneNumber = "0509705440",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "978bd87d-1f86-46a7-9bd6-aa8d30d52fda",
                            TwoFactorEnabled = false,
                            UserName = "Sohail"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6ca8dc2-2ed0-400a-9da3-8ac5d19be788",
                            DOB = new DateTime(1982, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mwasghar@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Waheed",
                            NormalizedEmail = "mmwasghar@hotmail.com",
                            NormalizedUserName = "WAHEED",
                            PasswordHash = "AQAAAAEAACcQAAAAEEgcRel1D7iX0JNPjBvTYwyEqK78llgfPQd2geIYuF7f4uU8cEmxLVp1Rni/8GSuxQ==",
                            PhoneNumber = "+12899381727",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f7e8a2d4-3307-493c-8145-f198a76cd580",
                            TwoFactorEnabled = false,
                            UserName = "Waheed"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c400dc6-6208-4c07-a554-9d3c68158ae2",
                            DOB = new DateTime(1982, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Editor@erp.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Editor",
                            NormalizedEmail = "Editor@hotmail.com",
                            NormalizedUserName = "EDITOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEBlTa3rPWICBcAH8wemhHtTKpQGgdD2oOxDbKGn5x9DT/8wumyWqHNYhANnNVQudNg==",
                            PhoneNumber = "+12899381727",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "44e23308-a725-416c-91cc-b3cc1eb492c1",
                            TwoFactorEnabled = false,
                            UserName = "Editor"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b28b3b0-3fbe-4795-baca-268b94b996ae",
                            DOB = new DateTime(1982, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Viewer@erp.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Viewer",
                            NormalizedEmail = "Viewer@hotmail.com",
                            NormalizedUserName = "VIEWER",
                            PasswordHash = "AQAAAAEAACcQAAAAEC0wT/Wi4hl08JxlKKURu+J40mF9IsYeeEHCqY57ze+edK60AoN9MA8g9gRzKAmI/w==",
                            PhoneNumber = "+12899381727",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f89f53db-c9f6-4c48-a2ff-b1026915476e",
                            TwoFactorEnabled = false,
                            UserName = "Viewer"
                        });
                });

            modelBuilder.Entity("Models.Fabric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<Guid?>("FabricCodeId");

                    b.Property<Guid?>("FabricTypeId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("FabricCodeId");

                    b.HasIndex("FabricTypeId");

                    b.ToTable("Fabrics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a35d3703-31eb-40a4-8473-17e4541ad3aa"),
                            Code = "PUF",
                            Description = "Pickup-Felt",
                            FabricCodeId = new Guid("f704ae37-c067-4d2a-8f58-d74bfc50bae5"),
                            FabricTypeId = new Guid("e26dc385-2b49-4821-afcc-4fce0c95d1d6"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("3d71bf60-ce6c-4c87-b271-6f0357c017fb"),
                            Code = "FW",
                            Description = "Forming Wire",
                            FabricCodeId = new Guid("b545b876-130a-40e5-9aec-1095d8885757"),
                            FabricTypeId = new Guid("43abcb6d-5814-4906-aee7-877926c928a1"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("ccc3c1a0-4807-4486-b611-c20711b65f66"),
                            Code = "FT",
                            Description = "Felt",
                            FabricCodeId = new Guid("75eb84c2-c26d-42fd-8c24-a2014f87c4b4"),
                            FabricTypeId = new Guid("e614b297-cccf-43a3-a2e3-43e9c48cdde4"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("ff9ba921-0b10-4e19-ba50-c54b48c6ef47"),
                            Code = "PF",
                            Description = "Press Felt",
                            FabricCodeId = new Guid("6f2ea20a-0e56-4dfa-9952-91859be12622"),
                            FabricTypeId = new Guid("e26dc385-2b49-4821-afcc-4fce0c95d1d6"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("20653d3a-ffee-45e8-a346-ca034e43a752"),
                            Code = "MG",
                            Description = "MG Felt",
                            FabricCodeId = new Guid("fdbfc1ef-759f-4439-9bbd-50036a2efc5a"),
                            FabricTypeId = new Guid("e26dc385-2b49-4821-afcc-4fce0c95d1d6"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("b9134bc6-8456-400e-8457-f3aa75cbeba4"),
                            Code = "DS",
                            Description = "Dryer Screen",
                            FabricCodeId = new Guid("7c0e978f-4b34-4666-82cd-48fa14265741"),
                            FabricTypeId = new Guid("bd0e4bd9-840e-4685-97b3-ac085e4ad79f"),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Models.FabricCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("FabricCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f704ae37-c067-4d2a-8f58-d74bfc50bae5"),
                            Code = "PUF",
                            Description = "Pickup-Felt",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("b545b876-130a-40e5-9aec-1095d8885757"),
                            Code = "FW",
                            Description = "Forming Wire",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("75eb84c2-c26d-42fd-8c24-a2014f87c4b4"),
                            Code = "FT",
                            Description = "Felt",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("6f2ea20a-0e56-4dfa-9952-91859be12622"),
                            Code = "PF",
                            Description = "Press Felt",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("fdbfc1ef-759f-4439-9bbd-50036a2efc5a"),
                            Code = "MG",
                            Description = "MG Felt",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("7c0e978f-4b34-4666-82cd-48fa14265741"),
                            Code = "DS",
                            Description = "Dryer Screen",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Models.FabricType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("FabricTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e26dc385-2b49-4821-afcc-4fce0c95d1d6"),
                            Description = "Single Layer",
                            IsActive = true,
                            Type = "SL"
                        },
                        new
                        {
                            Id = new Guid("43abcb6d-5814-4906-aee7-877926c928a1"),
                            Description = "Double Layer",
                            IsActive = true,
                            Type = "DL"
                        },
                        new
                        {
                            Id = new Guid("bd0e4bd9-840e-4685-97b3-ac085e4ad79f"),
                            Description = "1.5 Layer",
                            IsActive = true,
                            Type = "1.5L"
                        },
                        new
                        {
                            Id = new Guid("06593449-620a-4427-9e47-598dbda83a7e"),
                            Description = "Medium Spiral",
                            IsActive = true,
                            Type = "MS"
                        },
                        new
                        {
                            Id = new Guid("e614b297-cccf-43a3-a2e3-43e9c48cdde4"),
                            Description = "Large Spiral",
                            IsActive = true,
                            Type = "LS"
                        });
                });

            modelBuilder.Entity("Models.Logging.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("LogType");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLog");
                });

            modelBuilder.Entity("Models.Mill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CPMId")
                        .IsRequired();

                    b.Property<Guid?>("CityId")
                        .IsRequired();

                    b.Property<string>("Code");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("MDId")
                        .IsRequired();

                    b.Property<Guid?>("MangerId")
                        .IsRequired();

                    b.Property<Guid?>("MechanicalId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CPMId");

                    b.HasIndex("CityId");

                    b.HasIndex("MDId");

                    b.HasIndex("MangerId");

                    b.HasIndex("MechanicalId");

                    b.ToTable("Mills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69ae3e06-2407-4074-b4ab-450200bb3470"),
                            CPMId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            CityId = new Guid("93f89299-cfc9-4998-9ddd-09c5583dc8c2"),
                            Code = "07-kar-ahm",
                            IsActive = true,
                            MDId = new Guid("bbc84742-4bbf-44d6-bb17-911b82dbfc37"),
                            MangerId = new Guid("e2c71c6b-f141-415b-9a5d-ccb7727aeaa4"),
                            MechanicalId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            Name = "Ahmad Paper Mill"
                        },
                        new
                        {
                            Id = new Guid("c4c9feb4-3478-4dfc-ba01-b629c74a76e9"),
                            CPMId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            CityId = new Guid("93f89299-cfc9-4998-9ddd-09c5583dc8c2"),
                            Code = "07-kar-ash",
                            IsActive = true,
                            MDId = new Guid("bbc84742-4bbf-44d6-bb17-911b82dbfc37"),
                            MangerId = new Guid("e2c71c6b-f141-415b-9a5d-ccb7727aeaa4"),
                            MechanicalId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            Name = "Ashraf Paper"
                        },
                        new
                        {
                            Id = new Guid("d862a91a-a3aa-4767-ba1a-92a77606f2b9"),
                            CPMId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            CityId = new Guid("93f89299-cfc9-4998-9ddd-09c5583dc8c2"),
                            Code = "07-kar-azi",
                            IsActive = true,
                            MDId = new Guid("bbc84742-4bbf-44d6-bb17-911b82dbfc37"),
                            MangerId = new Guid("e2c71c6b-f141-415b-9a5d-ccb7727aeaa4"),
                            MechanicalId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            Name = "Aziz Paper"
                        },
                        new
                        {
                            Id = new Guid("e6933b4b-8ece-4791-b5f8-bdf98007cf59"),
                            CPMId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            CityId = new Guid("93f89299-cfc9-4998-9ddd-09c5583dc8c2"),
                            Code = "07-kar-asl",
                            IsActive = true,
                            MDId = new Guid("bbc84742-4bbf-44d6-bb17-911b82dbfc37"),
                            MangerId = new Guid("e2c71c6b-f141-415b-9a5d-ccb7727aeaa4"),
                            MechanicalId = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            Name = "ASL"
                        });
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountEachPiece");

                    b.Property<int>("ConsAmtYear");

                    b.Property<int>("ConsPcsYear");

                    b.Property<Guid?>("FabricId");

                    b.Property<string>("GSM");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Length");

                    b.Property<Guid?>("MillId");

                    b.Property<int>("NextOrder");

                    b.Property<int>("NextOrderCount");

                    b.Property<Guid?>("RegionId");

                    b.Property<double>("SM");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("FabricId");

                    b.HasIndex("MillId");

                    b.HasIndex("RegionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Models.OrderComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CommentDate");

                    b.Property<string>("Comments");

                    b.Property<Guid?>("ConsignmentOrderId");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentOrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderComments");
                });

            modelBuilder.Entity("Models.PaperMillProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("MillId");

                    b.Property<Guid?>("RegionId");

                    b.Property<double?>("TotalAmount");

                    b.Property<double?>("TotalConsAmtPerYear");

                    b.Property<double?>("TotalPCSCount");

                    b.HasKey("Id");

                    b.HasIndex("MillId");

                    b.HasIndex("RegionId");

                    b.ToTable("PaperMillProfile");
                });

            modelBuilder.Entity("Models.PaperMillProfileDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountEachPiece");

                    b.Property<double>("ConsAmtYear");

                    b.Property<int>("ConsPcsYear");

                    b.Property<Guid?>("FabricId");

                    b.Property<string>("GSM");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Length");

                    b.Property<int>("NextOrder");

                    b.Property<double?>("NextOrderCount");

                    b.Property<Guid?>("PaperMillProfileId");

                    b.Property<double>("SM");

                    b.Property<decimal>("Width");

                    b.Property<decimal>("Witln");

                    b.HasKey("Id");

                    b.HasIndex("FabricId");

                    b.HasIndex("PaperMillProfileId");

                    b.ToTable("PaperMillProfileDetail");
                });

            modelBuilder.Entity("Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PrimaryPhone")
                        .IsRequired();

                    b.Property<string>("SecondaryPhone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2ee36c6-55a6-41e2-b773-4c3a0c18a915"),
                            EmailAddress = "test1@test..com",
                            IsActive = true,
                            Name = "Person 1",
                            PrimaryPhone = "1111111",
                            SecondaryPhone = "1111111"
                        },
                        new
                        {
                            Id = new Guid("bbc84742-4bbf-44d6-bb17-911b82dbfc37"),
                            EmailAddress = "test2@test..com",
                            IsActive = true,
                            Name = "Person 2",
                            PrimaryPhone = "22222222",
                            SecondaryPhone = "22222222"
                        },
                        new
                        {
                            Id = new Guid("e2c71c6b-f141-415b-9a5d-ccb7727aeaa4"),
                            EmailAddress = "test3@test..com",
                            IsActive = true,
                            Name = "Person 3",
                            PrimaryPhone = "333333333",
                            SecondaryPhone = "333333333"
                        },
                        new
                        {
                            Id = new Guid("73eb19f8-f9c5-4a7a-be14-ed957a70467f"),
                            EmailAddress = "test4@test..com",
                            IsActive = true,
                            Name = "Person 4",
                            PrimaryPhone = "444444444",
                            SecondaryPhone = "444444444"
                        });
                });

            modelBuilder.Entity("Models.ProductRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AskingRate");

                    b.Property<Guid?>("FabricId");

                    b.Property<bool>("IsActive");

                    b.Property<double>("MaximumRate");

                    b.Property<double>("MinimumRate");

                    b.HasKey("Id");

                    b.HasIndex("FabricId");

                    b.ToTable("ProductRate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43553771-eebd-458f-91bb-efc0f6f5ef3b"),
                            AskingRate = 1111.0,
                            FabricId = new Guid("3d71bf60-ce6c-4c87-b271-6f0357c017fb"),
                            IsActive = true,
                            MaximumRate = 3333.0,
                            MinimumRate = 2222.0
                        },
                        new
                        {
                            Id = new Guid("8d9b8c04-756e-485d-8901-f6ee1dc98072"),
                            AskingRate = 4444.0,
                            FabricId = new Guid("ccc3c1a0-4807-4486-b611-c20711b65f66"),
                            IsActive = true,
                            MaximumRate = 6666.0,
                            MinimumRate = 5555.0
                        },
                        new
                        {
                            Id = new Guid("76b58ec7-5e0d-4868-8c45-c61f4664cb14"),
                            AskingRate = 7777.0,
                            FabricId = new Guid("ff9ba921-0b10-4e19-ba50-c54b48c6ef47"),
                            IsActive = true,
                            MaximumRate = 9999.0,
                            MinimumRate = 8888.0
                        },
                        new
                        {
                            Id = new Guid("3c498c68-ff89-4b83-994c-ca5e36faf9f4"),
                            AskingRate = 0.0,
                            FabricId = new Guid("20653d3a-ffee-45e8-a346-ca034e43a752"),
                            IsActive = true,
                            MaximumRate = 3344.0,
                            MinimumRate = 1122.0
                        },
                        new
                        {
                            Id = new Guid("2c14dd42-e9fd-4f38-a7f5-d9b90e090567"),
                            AskingRate = 4455.0,
                            FabricId = new Guid("b9134bc6-8456-400e-8457-f3aa75cbeba4"),
                            IsActive = true,
                            MaximumRate = 8899.0,
                            MinimumRate = 6677.0
                        });
                });

            modelBuilder.Entity("Models.Receivable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AlmostDead");

                    b.Property<double?>("AmounntReceiveable");

                    b.Property<Guid?>("CPMId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<double>("CurrentLessThen30Days");

                    b.Property<string>("DirectNumber");

                    b.Property<string>("Drawing");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MechanicalData");

                    b.Property<Guid?>("MillId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NextAction");

                    b.Property<string>("PersonReceivable");

                    b.Property<double>("PotentialAnnual");

                    b.Property<double>("Rec31To60");

                    b.Property<double>("Rec61To90");

                    b.Property<double>("Rec90Plus");

                    b.Property<double>("ReceiveableUpToDate");

                    b.Property<Guid?>("RegionId");

                    b.Property<double>("Sale2K18");

                    b.Property<double>("Sale2k16");

                    b.Property<double>("Sale2k17");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("CPMId");

                    b.HasIndex("MillId");

                    b.HasIndex("RegionId");

                    b.ToTable("Receivables");
                });

            modelBuilder.Entity("Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegionNo");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = new Guid("259bdb01-5e73-433d-abbe-e47ce06d6d4b"),
                            Code = "LHR",
                            Description = "Lahore",
                            IsActive = true,
                            Name = "Lahore",
                            RegionNo = 1
                        },
                        new
                        {
                            Id = new Guid("6288accf-398a-47a4-b1d9-33f29cdfd521"),
                            Code = "MUL",
                            Description = "Multan",
                            IsActive = true,
                            Name = "Multan",
                            RegionNo = 2
                        },
                        new
                        {
                            Id = new Guid("fbf360cd-fb70-44e6-932d-64e12dbcfa39"),
                            Code = "GRW",
                            Description = "Gujranwala",
                            IsActive = true,
                            Name = "Gujranwala",
                            RegionNo = 3
                        },
                        new
                        {
                            Id = new Guid("5ec19418-88bd-4d27-a885-02424070aa0b"),
                            Code = "PES",
                            Description = "Peshawar",
                            IsActive = true,
                            Name = "Peshawar",
                            RegionNo = 4
                        },
                        new
                        {
                            Id = new Guid("96db3d6d-4d23-4a28-ada0-7151baeeb752"),
                            Code = "SKP",
                            Description = "Sheikhupura",
                            IsActive = true,
                            Name = "Sheikhupura",
                            RegionNo = 5
                        },
                        new
                        {
                            Id = new Guid("31b29afc-3c08-44e1-a2b7-a3b8954c3caf"),
                            Code = "FSD",
                            Description = "Faislabad",
                            IsActive = true,
                            Name = "Faislabad",
                            RegionNo = 6
                        },
                        new
                        {
                            Id = new Guid("0e8c2c9a-f874-48e2-99d7-f4ba65a7ff80"),
                            Code = "SINDH",
                            Description = "Sindh",
                            IsActive = true,
                            Name = "Sindh",
                            RegionNo = 7
                        },
                        new
                        {
                            Id = new Guid("c835a328-730c-4ec7-b141-59a861b8ee07"),
                            Code = "MID   ",
                            Description = "Middle",
                            IsActive = true,
                            Name = "Middle",
                            RegionNo = 8
                        },
                        new
                        {
                            Id = new Guid("2cf6e3e1-cf0d-4cb1-9e01-9315dfd21af0"),
                            Code = "MSC",
                            Description = "Msc",
                            IsActive = true,
                            Name = "Msc",
                            RegionNo = 9
                        });
                });

            modelBuilder.Entity("Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43383cb7-e170-44e6-936d-baf07818b10a"),
                            IsActive = true,
                            Title = "Fabrics Report By Forming Wire"
                        },
                        new
                        {
                            Id = new Guid("43f41f34-a69c-49ad-9d7b-4bb1ec9d1e55"),
                            IsActive = true,
                            Title = "Fabrics Report By Felts"
                        },
                        new
                        {
                            Id = new Guid("57bace55-524b-4afa-8c31-3ca63099c61e"),
                            IsActive = true,
                            Title = "Fabrics Report By Dryer Screen"
                        },
                        new
                        {
                            Id = new Guid("0b59f606-17b8-4d2d-9131-2c63aefd0718"),
                            IsActive = true,
                            Title = "Performance Report By Forming Wire"
                        },
                        new
                        {
                            Id = new Guid("e436805e-ad6a-4644-b0a8-b67caf3079e9"),
                            IsActive = true,
                            Title = "Performance Report By Felts"
                        },
                        new
                        {
                            Id = new Guid("765b265a-a6f5-4332-af4d-28960bcf41ba"),
                            IsActive = true,
                            Title = "Performance Report By Dryer Screen"
                        });
                });

            modelBuilder.Entity("Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58e07c1d-f068-4a34-2b80-08d64cccfc63"),
                            Description = "Order has been created",
                            IsActive = true,
                            Name = "Created"
                        },
                        new
                        {
                            Id = new Guid("59e07c1d-f068-4a34-2b80-08d64cccfc63"),
                            Description = "Order has been submitted for approval",
                            IsActive = true,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = new Guid("5a585ca4-941f-4892-2b81-08d64cccfc63"),
                            Description = "Order has been approved",
                            IsActive = true,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = new Guid("b770f3f8-7b25-478e-2b82-08d64cccfc63"),
                            Description = "Order has been rejected",
                            IsActive = true,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = new Guid("12a02a4a-d055-4812-2b83-08d64cccfc63"),
                            Description = "Order has been completed",
                            IsActive = true,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("13a02a4a-d055-4812-2b83-08d64cccfc63"),
                            Description = "Order has been Closed",
                            IsActive = true,
                            Name = "Close"
                        },
                        new
                        {
                            Id = new Guid("13b02a4a-d055-4812-2b83-08d64cccfc63"),
                            Description = "Order has been Sjipped",
                            IsActive = true,
                            Name = "Shipped"
                        });
                });

            modelBuilder.Entity("Models.TRANSACTION", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ASSIGNMENT_ID")
                        .HasMaxLength(200);

                    b.Property<int?>("DPW_LOGICAL_STATUS_ID");

                    b.Property<string>("DTS_CLIENT_Company_Reference")
                        .HasMaxLength(150);

                    b.Property<int?>("DTS_CLIENT_USER_ID");

                    b.Property<string>("DTS_CLIENT_USER_NAME");

                    b.Property<string>("DTS_CLIENT_USER_Reference")
                        .HasMaxLength(150);

                    b.Property<string>("DTS_REPRESENTATIVE_EMAIL")
                        .HasMaxLength(100);

                    b.Property<string>("DTS_REPRESENTATIVE_MOBILE")
                        .HasMaxLength(50);

                    b.Property<string>("DTS_REPRESENTATIVE_NAME")
                        .HasMaxLength(200);

                    b.Property<int?>("DTS_SPONSER_ID");

                    b.Property<bool?>("IsRead");

                    b.Property<int?>("REG_USER_ID");

                    b.Property<int>("TRANSACTION_ATTACHMENT_ID");

                    b.Property<int?>("TRANSACTION_PARENT_ID");

                    b.Property<int>("TRANSACTION_STATUS_ID");

                    b.Property<int>("TRANSACTION_TYPE_ID");

                    b.Property<string>("TRA_Archivie_Path")
                        .HasMaxLength(500);

                    b.Property<int?>("TRA_CONSIGNEE_GOV_COMP_ID");

                    b.Property<int>("TRA_CONSIGNEE_ID");

                    b.Property<string>("TRA_CONSIGNEE_NAME")
                        .HasMaxLength(50);

                    b.Property<decimal?>("TRA_COST");

                    b.Property<int?>("TRA_EXTENDED_VALUE_ID");

                    b.Property<DateTime?>("TRA_Expiry_Date")
                        .HasColumnType("date");

                    b.Property<int?>("TRA_IMPORTANCY_ID");

                    b.Property<bool?>("TRA_IS_COMPLETED");

                    b.Property<bool?>("TRA_IS_LAST_LEVEL");

                    b.Property<bool?>("TRA_IS_PUBLISHED");

                    b.Property<int?>("TRA_PAYMENT_CHANNEL_ID");

                    b.Property<string>("TRA_REFERENCE_NUMBER")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TRA_TRANSACTION_BARCODE")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("TRA_TRANSACTION_CONTENT")
                        .HasMaxLength(300);

                    b.Property<string>("TRA_TRANSACTION_CONTRACT_NUMBER")
                        .HasMaxLength(50);

                    b.Property<DateTime>("TRA_TRANSACTION_CREATE_DATE");

                    b.Property<string>("TRA_TRANSACTION_INCOMING_NUMBER")
                        .HasMaxLength(50);

                    b.Property<string>("TRA_TRANSACTION_OUTGOING_NUMBER")
                        .HasMaxLength(50);

                    b.Property<string>("TRA_TRANSACTION_PROJECT_NAME")
                        .HasMaxLength(300);

                    b.Property<string>("TRA_TRANSACTION_PROJECT_NUMBER")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TRA_TRANSACTION_SHIFT_DATE");

                    b.Property<string>("TRA_TRANSACTION_SUBJECT")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("USER_ID");

                    b.Property<string>("WF_DOCUMENT_ID")
                        .HasMaxLength(150);

                    b.Property<int?>("WORKFLOW_LEVEL_ID");

                    b.HasKey("Id");

                    b.HasIndex("TRANSACTION_ATTACHMENT_ID");

                    b.HasIndex("TRANSACTION_TYPE_ID");

                    b.ToTable("TRANSACTION");
                });

            modelBuilder.Entity("Models.TRANSACTION_ATTACHMENT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ATTACHMENT_ID");

                    b.Property<string>("ATT_ATTACHMENT_NAME_AR")
                        .HasMaxLength(150);

                    b.Property<string>("ATT_ATTACHMENT_NAME_EN")
                        .HasMaxLength(150);

                    b.Property<bool?>("ATT_ATTAHCMENT_MANDATORY");

                    b.Property<string>("ATT_REF");

                    b.Property<double?>("ATT_SIZE");

                    b.Property<bool>("ATT_UPLOADED");

                    b.Property<int?>("ATT_VER_NO");

                    b.Property<DateTime?>("TA_Creation_Date");

                    b.Property<int>("TRANSACTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("ATTACHMENT_ID");

                    b.HasIndex("TRANSACTION_ID");

                    b.ToTable("TRANSACTION_ATTACHMENT");
                });

            modelBuilder.Entity("Models.TRANSACTION_TYPE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ATTACHMENT_ID");

                    b.Property<string>("Schema_Code")
                        .HasMaxLength(150);

                    b.Property<bool?>("TTP_ALLOW_OTHER_ATTACHMENTS");

                    b.Property<int?>("TTP_CATEGORY_ID");

                    b.Property<int?>("TTP_DEFAULT_DURATION");

                    b.Property<string>("TTP_DELETE_COMMENT");

                    b.Property<bool?>("TTP_FORM_BUILDER_ACTIVE");

                    b.Property<string>("TTP_FORM_BUILDER_DLL_PATH")
                        .HasMaxLength(1000);

                    b.Property<string>("TTP_FORM_BUILDER_TABLE_NAME")
                        .HasMaxLength(500);

                    b.Property<bool?>("TTP_IS_DELETED");

                    b.Property<bool?>("TTP_IS_PUBLISHED");

                    b.Property<bool?>("TTP_NEED_CLIENT");

                    b.Property<decimal?>("TTP_PRICE");

                    b.Property<string>("TTP_SERVICE_CODE")
                        .HasMaxLength(50);

                    b.Property<int?>("TTP_SERVICE_ID");

                    b.Property<string>("TTP_SERVICE_NAME")
                        .HasMaxLength(150);

                    b.Property<string>("TTP_SERVICE_TABLE_NAME")
                        .HasMaxLength(50);

                    b.Property<int?>("TTP_TEMPLATE_ID");

                    b.Property<int?>("TTP_TRANSACTION_TYPE_FORM");

                    b.Property<string>("TTP_TYPE_DESC_AR")
                        .HasMaxLength(4000);

                    b.Property<string>("TTP_TYPE_DESC_EN")
                        .HasMaxLength(4000);

                    b.Property<string>("TTP_TYPE_NAME_AR")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TTP_TYPE_NAME_EN")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ATTACHMENT_ID");

                    b.ToTable("TRANSACTION_TYPE");
                });

            modelBuilder.Entity("Models.TempAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationTypeId");

                    b.Property<int?>("AttachmentTypeId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("FileName")
                        .HasMaxLength(200);

                    b.Property<int?>("FileType");

                    b.Property<string>("Path")
                        .HasMaxLength(500);

                    b.Property<string>("SessionId")
                        .HasMaxLength(100);

                    b.Property<Guid?>("StreamId");

                    b.Property<int?>("TransactionId");

                    b.HasKey("Id");

                    b.ToTable("TempAttachment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ERPUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ERPUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ERPUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ERPUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ATTACHMENT", b =>
                {
                    b.HasOne("Models.TRANSACTION_ATTACHMENT", "TRANSACTION_ATTACHMENT")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_ATTACHMENT_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.TRANSACTION_TYPE", "TRANSACTION_TYPE")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ActionButtons", b =>
                {
                    b.HasOne("Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.HasOne("Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Models.ConsignmentOrder", b =>
                {
                    b.HasOne("Models.Mill", "Mill")
                        .WithMany()
                        .HasForeignKey("MillId");

                    b.HasOne("Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Models.ConsignmentOrderItem", b =>
                {
                    b.HasOne("Models.ConsignmentOrder", "ConsignmentOrder")
                        .WithMany("ConsignmentOrderItems")
                        .HasForeignKey("ConsignmentOrderId");

                    b.HasOne("Models.Fabric", "Fabric")
                        .WithMany()
                        .HasForeignKey("FabricId");
                });

            modelBuilder.Entity("Models.DailyStock", b =>
                {
                    b.HasOne("Models.Fabric", "Fabric")
                        .WithMany()
                        .HasForeignKey("FabricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Mill", "Mill")
                        .WithMany()
                        .HasForeignKey("MillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Fabric", b =>
                {
                    b.HasOne("Models.FabricCode", "FabricCode")
                        .WithMany()
                        .HasForeignKey("FabricCodeId");

                    b.HasOne("Models.FabricType", "FabricType")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");
                });

            modelBuilder.Entity("Models.Mill", b =>
                {
                    b.HasOne("Models.Person", "CPMPerson")
                        .WithMany()
                        .HasForeignKey("CPMId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("MDId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Person", "MangerPerson")
                        .WithMany()
                        .HasForeignKey("MangerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Person", "MechanicalPerson")
                        .WithMany()
                        .HasForeignKey("MechanicalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.Fabric", "Fabric")
                        .WithMany()
                        .HasForeignKey("FabricId");

                    b.HasOne("Models.Mill", "Mill")
                        .WithMany()
                        .HasForeignKey("MillId");

                    b.HasOne("Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Models.OrderComment", b =>
                {
                    b.HasOne("Models.ConsignmentOrder", "ConsignmentOrder")
                        .WithMany()
                        .HasForeignKey("ConsignmentOrderId");

                    b.HasOne("Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Models.PaperMillProfile", b =>
                {
                    b.HasOne("Models.Mill", "Mill")
                        .WithMany()
                        .HasForeignKey("MillId");

                    b.HasOne("Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Models.PaperMillProfileDetail", b =>
                {
                    b.HasOne("Models.Fabric", "Fabric")
                        .WithMany()
                        .HasForeignKey("FabricId");

                    b.HasOne("Models.PaperMillProfile", "PaperMillProfile")
                        .WithMany()
                        .HasForeignKey("PaperMillProfileId");
                });

            modelBuilder.Entity("Models.ProductRate", b =>
                {
                    b.HasOne("Models.Fabric", "Fabric")
                        .WithMany()
                        .HasForeignKey("FabricId");
                });

            modelBuilder.Entity("Models.Receivable", b =>
                {
                    b.HasOne("Models.Person", "CPMPerson")
                        .WithMany()
                        .HasForeignKey("CPMId");

                    b.HasOne("Models.Mill", "Mill")
                        .WithMany()
                        .HasForeignKey("MillId");

                    b.HasOne("Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Models.TRANSACTION", b =>
                {
                    b.HasOne("Models.TRANSACTION_ATTACHMENT", "TRANSACTION_ATTACHMENT")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_ATTACHMENT_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.TRANSACTION_TYPE", "TRANSACTION_TYPE")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.TRANSACTION_ATTACHMENT", b =>
                {
                    b.HasOne("Models.ATTACHMENT", "ATTACHMENT")
                        .WithMany()
                        .HasForeignKey("ATTACHMENT_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.TRANSACTION", "TRANSACTION")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.TRANSACTION_TYPE", b =>
                {
                    b.HasOne("Models.ATTACHMENT", "ATTACHMENT")
                        .WithMany()
                        .HasForeignKey("ATTACHMENT_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
